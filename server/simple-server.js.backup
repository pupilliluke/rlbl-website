const express = require('express');
const cors = require('cors');
require('dotenv').config({ path: '.env.local' });
const { query, testConnection } = require('./database');

// Gracefully handle database connection issues
let databaseConnected = false;
const initializeDatabase = async () => {
  try {
    await testConnection();
    console.log('📊 Database connected and ready');
    databaseConnected = true;
  } catch (error) {
    console.warn('⚠️  Database connection failed, running in mock mode');
    databaseConnected = false;
  }
};

const app = express();
const PORT = 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Test database connection on startup
testConnection();

console.log('Setting up API routes...');

// API Routes
app.get('/api/health', async (req, res) => {
  try {
    await query('SELECT 1');
    res.json({ message: 'Server and database running!', status: 'healthy' });
  } catch (error) {
    res.status(500).json({ message: 'Database connection failed', error: error.message });
  }
});

app.get('/api/teams', async (req, res) => {
  try {
    const result = await query(`
      SELECT id, team_name, logo_url, color, created_at 
      FROM teams 
      ORDER BY team_name
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch teams', details: error.message });
  }
});

app.get('/api/players', async (req, res) => {
  try {
    const result = await query(`
      SELECT 
        p.id, 
        p.player_name, 
        p.gamertag,
        t.team_name,
        t.color as team_color
      FROM players p
      LEFT JOIN player_seasons ps ON p.id = ps.player_id
      LEFT JOIN teams t ON ps.team_id = t.id
      ORDER BY t.team_name, p.player_name
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch players', details: error.message });
  }
});

app.get('/api/standings', async (req, res) => {
  try {
    const result = await query(`
      SELECT 
        t.id,
        t.team_name,
        t.logo_url,
        t.color,
        s.wins,
        s.losses,
        s.ties,
        s.points_for,
        s.points_against,
        (s.points_for - s.points_against) as point_diff,
        ROUND(((CAST(s.wins as FLOAT) / NULLIF(s.wins + s.losses + s.ties, 0)) * 100)::numeric, 1) as win_percentage
      FROM standings s
      JOIN teams t ON s.team_id = t.id
      ORDER BY s.wins DESC, point_diff DESC
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch standings', details: error.message });
  }
});

app.get('/api/schedule', async (req, res) => {
  try {
    const result = await query(`
      SELECT 
        g.id,
        g.week,
        g.game_date,
        g.home_score,
        g.away_score,
        g.is_playoffs,
        ht.team_name as home_team_name,
        ht.color as home_team_color,
        ht.logo_url as home_team_logo,
        at.team_name as away_team_name,
        at.color as away_team_color,
        at.logo_url as away_team_logo,
        CASE 
          WHEN g.home_score > g.away_score THEN ht.team_name
          WHEN g.away_score > g.home_score THEN at.team_name
          ELSE 'TIE'
        END as winner
      FROM games g
      JOIN teams ht ON g.home_team_id = ht.id
      JOIN teams at ON g.away_team_id = at.id
      ORDER BY g.week, g.game_date
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch schedule', details: error.message });
  }
});

app.get('/api/stats', async (req, res) => {
  try {
    const season = req.query.season;
    console.log('Fetching stats for season:', season);
    
    // Handle current season (Season 3 - not started)
    if (season === 'current') {
      console.log('Returning empty array for current season');
      return res.json([]);
    }
    
    // Handle career stats
    if (season === 'career') {
      console.log('Returning career stats');
      const careerData = [
        {
          id: 1, player_name: "Dylan", gamertag: "Dylan", team_name: "Career Total", team_color: "#999999",
          total_points: 22942, total_goals: 71, total_assists: 48, total_saves: 54, total_shots: 156,
          total_mvps: 7, total_demos: 47, total_epic_saves: 12, games_played: 72, avg_points_per_game: "318.6"
        },
        {
          id: 2, player_name: "Tyler", gamertag: "Tyler", team_name: "Career Total", team_color: "#999999", 
          total_points: 26730, total_goals: 100, total_assists: 46, total_saves: 61, total_shots: 258,
          total_mvps: 33, total_demos: 54, total_epic_saves: 22, games_played: 48, avg_points_per_game: "556.9"
        },
        {
          id: 3, player_name: "Mason", gamertag: "Mason", team_name: "Career Total", team_color: "#999999",
          total_points: 42908, total_goals: 150, total_assists: 46, total_saves: 119, total_shots: 321,
          total_mvps: 31, total_demos: 24, total_epic_saves: 26, games_played: 88, avg_points_per_game: "487.6"
        }
      ];
      return res.json(careerData);
    }
    
    // Handle Season 1
    if (season === 'season1') {
      console.log('Returning Season 1 stats');
      const season1Data = [
        {
          id: 1, player_name: "Dylan", gamertag: "Dylan", team_name: "The Wolverines", team_color: "#666666",
          total_points: 11383, total_goals: 37, total_assists: 25, total_saves: 25, total_shots: 80,
          total_mvps: 5, total_demos: 22, total_epic_saves: 8, games_played: 24, avg_points_per_game: "474.3"
        },
        {
          id: 2, player_name: "Matt S", gamertag: "Matt S", team_name: "Drunken Goats", team_color: "#666666",
          total_points: 15231, total_goals: 62, total_assists: 21, total_saves: 31, total_shots: 113,
          total_mvps: 11, total_demos: 6, total_epic_saves: 7, games_played: 24, avg_points_per_game: "634.6"
        },
        {
          id: 3, player_name: "Tyler", gamertag: "Tyler", team_name: "John & Tyler", team_color: "#666666",
          total_points: 17512, total_goals: 84, total_assists: 16, total_saves: 28, total_shots: 159,
          total_mvps: 20, total_demos: 27, total_epic_saves: 9, games_played: 24, avg_points_per_game: "729.7"
        }
      ];
      return res.json(season1Data);
    }
    
    // Handle Season 2
    if (season === 'season2') {
      console.log('Returning Season 2 stats');
      const season2Data = [
        {
          id: 1, player_name: "Austin", gamertag: "Austin", team_name: "Backdoor Bandits", team_color: "#666666",
          total_points: 12952, total_goals: 41, total_assists: 22, total_saves: 33, total_shots: 101,
          total_mvps: 7, total_demos: 23, total_epic_saves: 8, games_played: 24, avg_points_per_game: "539.7"
        },
        {
          id: 2, player_name: "Gup", gamertag: "Gup", team_name: "Chicken Jockey", team_color: "#666666",
          total_points: 18393, total_goals: 63, total_assists: 12, total_saves: 54, total_shots: 152,
          total_mvps: 14, total_demos: 25, total_epic_saves: 11, games_played: 24, avg_points_per_game: "766.4"
        },
        {
          id: 3, player_name: "Mason", gamertag: "Mason", team_name: "Non Chalant", team_color: "#666666",
          total_points: 17106, total_goals: 65, total_assists: 20, total_saves: 44, total_shots: 126,
          total_mvps: 13, total_demos: 11, total_epic_saves: 8, games_played: 24, avg_points_per_game: "712.8"
        }
      ];
      return res.json(season2Data);
    }
    
    // Handle Season 2 Playoffs
    if (season === 'season2_playoffs') {
      console.log('Returning Season 2 Playoffs stats');
      const playoffData = [
        {
          id: 1, player_name: "Austin", gamertag: "Austin", team_name: "Backdoor Bandits", team_color: "#666666",
          total_points: 5835, total_goals: 16, total_assists: 7, total_saves: 26, total_shots: 47,
          total_mvps: 3, total_demos: 6, total_epic_saves: 6, games_played: 12, avg_points_per_game: "486.3"
        },
        {
          id: 2, player_name: "Mason", gamertag: "Mason", team_name: "Drunken Goats", team_color: "#666666",
          total_points: 9530, total_goals: 30, total_assists: 12, total_saves: 23, total_shots: 74,
          total_mvps: 8, total_demos: 6, total_epic_saves: 6, games_played: 16, avg_points_per_game: "595.6"
        }
      ];
      return res.json(playoffData);
    }
    
    // Default: return current database stats (all-time aggregate)
    console.log('Returning default database stats');
    const result = await query(`
      SELECT 
        p.id,
        p.player_name,
        p.gamertag,
        t.team_name,
        t.color as team_color,
        SUM(pgs.points) as total_points,
        SUM(pgs.goals) as total_goals,
        SUM(pgs.assists) as total_assists,
        SUM(pgs.saves) as total_saves,
        SUM(pgs.shots) as total_shots,
        SUM(pgs.mvps) as total_mvps,
        SUM(pgs.demos) as total_demos,
        SUM(pgs.epic_saves) as total_epic_saves,
        COUNT(pgs.game_id) as games_played,
        ROUND((CAST(SUM(pgs.points) as FLOAT) / NULLIF(COUNT(pgs.game_id), 0))::numeric, 1) as avg_points_per_game
      FROM player_game_stats pgs
      JOIN players p ON pgs.player_id = p.id
      JOIN teams t ON pgs.team_id = t.id
      GROUP BY p.id, p.player_name, p.gamertag, t.team_name, t.color
      ORDER BY total_points DESC
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch stats', details: error.message });
  }
});

app.get('/api/power-rankings', async (req, res) => {
  try {
    const result = await query(`
      SELECT 
        pr.rank,
        pr.week,
        pr.reasoning,
        t.id as team_id,
        t.team_name,
        t.logo_url,
        t.color
      FROM power_rankings pr
      JOIN teams t ON pr.team_id = t.id
      WHERE pr.week = (SELECT MAX(week) FROM power_rankings)
      ORDER BY pr.rank
    `);
    res.json(result.rows);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch power rankings', details: error.message });
  }
});

// Get seasons a team has participated in
app.get('/api/teams/:teamId/seasons', async (req, res) => {
  try {
    const { teamId } = req.params;
    
    // For now, return mock data based on team
    const teamSeasonData = {
      '1': ['2024', '2023', '2022'], // Non Chalant
      '2': ['2024', '2023'], // Pen15 Club
      '3': ['2024', '2023', '2022'], // MJ
      '4': ['2024', '2023'], // Drunken Goats
      '5': ['2024'], // Chicken Jockey
      '6': ['2024', '2023', '2022'], // Backdoor Bandits
      '7': ['2024', '2023'], // Jakeing It
      '8': ['2024', '2023', '2022'], // Mid Boost
      '9': ['2024'], // Nick Al Nite
      '10': ['2024', '2023'], // Double Bogey
      '11': ['2024'], // Bronny James
      '12': ['2024', '2023'], // The Chopped Trees
      '13': ['2024'] // The Shock
    };
    
    const seasons = teamSeasonData[teamId] || ['2024'];
    res.json({ teamId, seasons });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch team seasons', details: error.message });
  }
});

// Get seasons a player has participated in
app.get('/api/players/:playerId/seasons', async (req, res) => {
  try {
    const { playerId } = req.params;
    
    // For now, return mock data - most players active in recent seasons
    const seasons = ['2024', '2023', '2022'];
    res.json({ playerId, seasons });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch player seasons', details: error.message });
  }
});

// Get team stats for a specific season
app.get('/api/teams/:teamSlug/stats', async (req, res) => {
  try {
    const { teamSlug } = req.params;
    const { season = '2024' } = req.query;
    
    // Mock season-specific data
    const seasonData = {
      '2024': {
        wins: 8, losses: 4, ties: 1,
        pointsFor: 45, pointsAgainst: 32,
        goalsFor: 38, goalsAgainst: 25
      },
      '2023': {
        wins: 6, losses: 6, ties: 2,
        pointsFor: 38, pointsAgainst: 38,
        goalsFor: 30, goalsAgainst: 30
      },
      '2022': {
        wins: 4, losses: 8, ties: 0,
        pointsFor: 28, pointsAgainst: 48,
        goalsFor: 22, goalsAgainst: 40
      }
    };
    
    const stats = seasonData[season] || seasonData['2024'];
    res.json({ teamSlug, season, stats });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch team stats', details: error.message });
  }
});

// Update player data
app.put('/api/players/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { player_name, gamertag, team_id } = req.body;
    
    // For now, simulate a successful update since we have database connection issues
    // In production with proper database, this would update the actual database
    console.log(`Simulating player update: ID ${id}, Name: ${player_name}, Gamertag: ${gamertag}`);
    
    const mockUpdatedPlayer = {
      id: parseInt(id),
      player_name,
      gamertag,
      team_id: team_id || null,
      updated_at: new Date().toISOString()
    };
    
    res.json({ 
      message: 'Player updated successfully (simulated)', 
      player: mockUpdatedPlayer 
    });
    
    // Uncomment below for actual database implementation:
    /*
    const result = await query(`
      UPDATE players 
      SET player_name = $1, gamertag = $2, updated_at = NOW()
      WHERE id = $3
      RETURNING *
    `, [player_name, gamertag, id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // If team_id is provided, update the player_seasons table
    if (team_id) {
      await query(`
        UPDATE player_seasons 
        SET team_id = $1 
        WHERE player_id = $2 AND is_active = true
      `, [team_id, id]);
    }
    
    res.json({ 
      message: 'Player updated successfully', 
      player: result.rows[0] 
    });
    */
  } catch (error) {
    console.error('Error updating player:', error);
    res.status(500).json({ error: 'Failed to update player', details: error.message });
  }
});

// Add new player
app.post('/api/players', async (req, res) => {
  try {
    const { player_name, gamertag, team_id } = req.body;
    
    const result = await query(`
      INSERT INTO players (player_name, gamertag, created_at, updated_at)
      VALUES ($1, $2, NOW(), NOW())
      RETURNING *
    `, [player_name, gamertag]);
    
    const newPlayer = result.rows[0];
    
    // Add to player_seasons if team_id provided
    if (team_id) {
      await query(`
        INSERT INTO player_seasons (player_id, team_id, season_id, is_active, created_at)
        VALUES ($1, $2, (SELECT id FROM seasons WHERE is_active = true LIMIT 1), true, NOW())
      `, [newPlayer.id, team_id]);
    }
    
    res.json({ 
      message: 'Player created successfully', 
      player: newPlayer 
    });
  } catch (error) {
    console.error('Error creating player:', error);
    res.status(500).json({ error: 'Failed to create player', details: error.message });
  }
});

// Delete player
app.delete('/api/players/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    // First delete related records
    await query('DELETE FROM player_game_stats WHERE player_id = $1', [id]);
    await query('DELETE FROM player_seasons WHERE player_id = $1', [id]);
    
    const result = await query('DELETE FROM players WHERE id = $1 RETURNING *', [id]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    res.json({ 
      message: 'Player deleted successfully', 
      player: result.rows[0] 
    });
  } catch (error) {
    console.error('Error deleting player:', error);
    res.status(500).json({ error: 'Failed to delete player', details: error.message });
  }
});

app.get('/api/test', async (req, res) => {
  try {
    const { testDatabaseData } = require('./test-database');
    
    // Capture console output
    const originalLog = console.log;
    let output = '';
    console.log = (...args) => {
      output += args.join(' ') + '\n';
    };
    
    await testDatabaseData();
    console.log = originalLog;
    
    res.json({ 
      message: 'Database test completed successfully!', 
      output: output,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ error: 'Database test failed', details: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
  
  // Initialize database in background without blocking server startup
  initializeDatabase().finally(() => {
    console.log(`🔄 Server ready with ${databaseConnected ? 'database' : 'mock'} mode`);
    console.log(`\n🔗 Test your API endpoints:`);
    console.log(`   http://localhost:${PORT}/api/health`);
    console.log(`   http://localhost:${PORT}/api/teams`);
    console.log(`   http://localhost:${PORT}/api/players`);
    console.log(`   http://localhost:${PORT}/api/standings`);
    console.log(`   http://localhost:${PORT}/api/schedule`);
    console.log(`   http://localhost:${PORT}/api/stats`);
    console.log(`   http://localhost:${PORT}/api/power-rankings`);
    console.log(`   http://localhost:${PORT}/api/test`);
  });
});